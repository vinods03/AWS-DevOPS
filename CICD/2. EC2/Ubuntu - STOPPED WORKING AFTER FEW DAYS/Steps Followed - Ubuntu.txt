We will first provision an EC2 Instance and install all required packages and code manually to verify if code behaves as expected.
Once verified, we will automate the installation in CodeCommit, CodeBuild, CodeDeploy, CodePipeline.

================================================ Manual Steps ====================================================

Launch an EC2 Ubuntu instance with public IP enabled, security group allowing SSH/HTTP/HTTPS traffic on ports 22, 80, 443 / also port 5000, associated with correct key pair and IAM role having access to S3

Connect

sudo apt-get update (update the packages on the Ubuntu EC2 instance)

echo "\$nrconf{restart} = \"l\"" | sudo tee -a /etc/needrestart/needrestart.conf (without this, we are asked if service needs to be restarted after apt-get install)

sudo apt-get install -y python3-pip (install python)

pip3 install scikit-learn==0.24.0 (install sklearn)

pip3 install flask (install flask)

pip3 install xgboost (if using xgb model)

sudo apt install -y awscli (we need awscli to copy the predictor python file and model pickle file into the EC2 instance)

aws s3 cp s3://vinod-ml-sagemaker-bucket/car_price/handler.py .

aws s3 cp s3://vinod-ml-sagemaker-bucket/car_price/xgb_gridsearch_regressor.pkl .

aws s3 cp s3://vinod-ml-sagemaker-bucket/car_price/random_forest_regressor.pkl .

python3 handler.py (this is the python code app that uses the model to predict price - this is the endpoint)

Copy the Public DNS of the EC2 instance and run below in POSTMAN:

POST:  http://ec2-18-212-217-9.compute-1.amazonaws.com:5000/car_price_predict
BODY: Raw: JSON:
{   "symboling": 2,
    "normalized-losses": 164,
    "wheel-base": 99.8,
    "make": "audi",
    "fuel-type": "gas",
    "aspiration": "std",
    "num-of-doors": "four",
    "body-style": "sedan",
    "drive-wheels": "fwd",
    "engine-location": "front",
    "length": 176.60,
    "width": 66.20,
    "height": 54.30,
    "curb-weight": 2337,
    "engine-type": "ohc",
    "num-of-cylinders": "four",
    "engine-size": 109, 
    "fuel-system": "mpfi",
    "bore": 3.19,
    "stroke": 3.40,
    "compression-ratio": 10,
    "horsepower": 102,
    "peak-rpm": 5500,
    "city-mpg": 24,
    "highway-mpg": 30
}

If this is working, we can also try below from the same EC2 instance - different session ofcourse. This will be useful for CodeBuild Unit Testing.

python3 (Go to python prompt and then execute below code)

import requests

url = 'http://0.0.0.0:5000/car_price_predict'

r = requests.post(url, json = {
    "symboling": 2,
    "normalized-losses": 164,
    "wheel-base": 99.8,
    "make": "audi",
    "fuel-type": "gas",
    "aspiration": "std",
    "num-of-doors": "four",
    "body-style": "sedan",
    "drive-wheels": "fwd",
    "engine-location": "front",
    "length": 176.60,
    "width": 66.20,
    "height": 54.30,
    "curb-weight": 2337,
    "engine-type": "ohc",
    "num-of-cylinders": "four",
    "engine-size": 109, 
    "fuel-system": "mpfi",
    "bore": 3.19,
    "stroke": 3.40,
    "compression-ratio": 10,
    "horsepower": 102,
    "peak-rpm": 5500,
    "city-mpg": 24,
    "highway-mpg": 30
})

print(r.text)

if r.text == '[12815.2]':
   print('yes')
else:
   print('no')

================================================ Configure Server for Code Deploy ====================================================

Launch an EC2 Ubuntu instance with public IP enabled, security group allowing SSH/HTTP/HTTPS traffic on ports 22, 80, 443 / also port 5000, associated with correct key pair and IAM role having access to S3. One important thing to do here is to associate an appropriate tag for the instance. Code Deploy needs tags to identify where to install prequisites and other code.
I used a Tag with Name: Environment and Value: Test.
As seen in the manual steps, this is the server where the machine learning app will run.
This is where we need to install all pre-requisites and copy our code.

So, we will install CodeDeploy agent on this server.

# Installing CodeDeploy Agent
sudo apt-get update -y
sudo apt-get install -y ruby wget
wget https://aws-codedeploy-us-east-1.s3.us-east-1.amazonaws.com/latest/install
chmod +x ./install
sudo ./install auto

# Checking CodeDeploy Agent status
sudo service codedeploy-agent status

Also, I created a folder structure at the root of the Ec2 instance for the code base.
cd /tmp
mkdir ml-app

Lets move to the AWS Console now.
Next, lets create a CodeDeploy IAM Role using the managed AWS CodeDeploy Role that has access related to autoscaling, load balancing and tag access on resources.
Then comes creation of a Code Deployment Application and Code Deployment Group.
Code Deployment Group is created using the IAM Role created above and the "Environment" Tag of the EC2 instance where we want the deployment to happen.
The Compute Type is EC2 - not ECS or Lambda for this use case.
Since we have one instance only, we will use the In-place and AllAtOnce deploymeent settings and also we will not be enabling Load balancing now.

Then lets add a Code Commit Repository with handler.py, .pkl file.
We need more files but we will add these later.

Then lets create a Code Pipeline with Source stage as above Code Commit repo, skip build stage and the deployment stage as the above Code Deploy Application / Deployment group.
